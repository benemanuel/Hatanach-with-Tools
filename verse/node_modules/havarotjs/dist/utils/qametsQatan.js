"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertsQametsQatan = void 0;
const sequence_1 = require("./sequence");
const removeTaamim_1 = require("./removeTaamim");
const snippets = [
    "??????????????",
    "??????????",
    "??????????",
    "??????????",
    "????????????",
    "??????????",
    "??????????",
    "????????????",
    "????????????",
    "????????????",
    "??????????????",
    "????????????????",
    "??????????",
    "????????????",
    "??????????",
    "????????????",
    "??????????",
    "????????????",
    "????????????",
    "??????????????????",
    "????????????",
    "??????????",
    "????????????????",
    "??????????????",
    "??????????",
    "????????????????",
    "??????????????????",
    "??????????",
    "??????????????????",
    "????????????",
    "??????????????",
    "??????????",
    "????????????",
    "????????????????????",
    "??????????",
    "????????????",
    "????????",
    "??????????????",
    "??????????",
    "??????????????",
    "??????????",
    "??????????",
    "????????????",
    "????????????",
    "????????????",
    "??????????",
    "????????????",
    "????????????",
    "??????????",
    "??????????",
    "????????????",
    "??????????????",
    "??????????????",
    "??????????????????"
];
const wholeWords = [
    // nouns
    "????????",
    "^????????????$",
    "??????????",
    "????????",
    "^???????? $",
    "^?????? $",
    "????????",
    "????????",
    "????????",
    "??????????",
    // verbs
    "????????????????",
    "????????????????",
    "????????????????",
    "????????????????",
    "????????????????",
    "??????????????????",
    "????????????????",
    "????????????????",
    "??????????????????"
];
const sequenceSnippets = (arr) => {
    return arr.map((snippet) => {
        const text = snippet.normalize("NFKD");
        const sequencedChar = (0, sequence_1.sequence)(text).flat();
        return sequencedChar.reduce((a, c) => a + c.text, "");
    });
};
const snippetsRegx = sequenceSnippets(snippets);
const wholeWordsRegx = sequenceSnippets(wholeWords);
const convertsQametsQatan = (word) => {
    const qametsReg = /\u{05B8}/u;
    const hatefQamRef = /\u{05B3}/u;
    // if no qamets, return
    if (!qametsReg.test(word)) {
        return word;
    }
    // check for hatef qamets followed by qamets pattern
    if (hatefQamRef.test(word)) {
        const hatefPos = word.indexOf("\u{05B3}");
        const qamPos = word.indexOf("\u{05B8}");
        if (qamPos !== -1 && qamPos < hatefPos) {
            return word.substring(0, qamPos) + "\u{05C7}" + word.substring(qamPos + 1);
        }
    }
    const [noTaamim, charPos] = (0, removeTaamim_1.removeTaamim)(word);
    // check if in verbal list (more frequent)
    for (const wholeWord of wholeWordsRegx) {
        const regEx = new RegExp(wholeWord);
        const match = noTaamim.match(regEx);
        if (!match) {
            continue;
        }
        else {
            const lastQam = word.lastIndexOf("\u{05B8}");
            return word.substring(0, lastQam) + "\u{05C7}" + word.substring(lastQam + 1);
        }
    }
    // check if in nominal list
    for (const snippet of snippetsRegx) {
        const regEx = new RegExp(snippet);
        const match = noTaamim.match(regEx);
        if (!match) {
            continue;
        }
        else {
            const start = charPos[match.index]; // eslint-disable-line
            const end = charPos[match[0].length] + start;
            const matched = word.substring(start, end);
            const withQQatan = matched.split(qametsReg).join("\u{05C7}");
            word = word.split(matched).join(withQQatan);
            return word;
        }
    }
    return word;
};
exports.convertsQametsQatan = convertsQametsQatan;
//# sourceMappingURL=qametsQatan.js.map

