import { Syllable } from "./syllable";
import { Cluster } from "./cluster";
import { Char } from "./char";
import { SylOpts } from "./text";
/**
 * [[`Text.text`]] is split at each space and maqqef (U+05BE) both of which are captured.
 * Thus, the string passed to instantiate each `Word` is already properly decomposed, sequenced, qamets qatan patterns converted to the appropriate unicode character (U+05C7), and holem-waw sequences corrected.
 */
export declare class Word {
    #private;
    /**
     * Returns a string with any whitespace characters (e.g. `/\s/`) from before the word.
     * It does **not** capture whitespace at the start of a `Text`.
     *
     * ```typescript
     * const heb = `
     * ??????????
     * ????????????????
     * `;
     * const text: Text = new Text(heb);
     * text.words;
     * // [
     * //   Word {
     * //     original: '??????????\n',
     * //     text: '??????????',
     * //     whiteSpaceBefore: '',
     * //     whiteSpaceAfter: '\n'
     * //   },
     * //   Word {
     * //     original: '????????????????',
     * //     text: '????????????????',
     * //     whiteSpaceBefore: '',
     * //     whiteSpaceAfter: ''
     * //   }
     * // ]
     * ```
     */
    whiteSpaceBefore: string | null;
    /**
     * Returns a string with any whitespace characters (e.g. `/\s/`) after the word.
     *
     * ```typescript
     * const heb = `
     * ??????????
     * ????????????????
     * `;
     * const text: Text = new Text(heb);
     * text.words;
     * // [
     * //   Word {
     * //     original: '??????????\n',
     * //     text: '??????????',
     * //     whiteSpaceBefore: '',
     * //     whiteSpaceAfter: '\n'
     * //   },
     * //   Word {
     * //     original: '????????????????',
     * //     text: '????????????????',
     * //     whiteSpaceBefore: '',
     * //     whiteSpaceAfter: ''
     * //   }
     * // ]
     * ```
     */
    whiteSpaceAfter: string | null;
    private sylOpts;
    constructor(text: string, sylOpts: SylOpts);
    /**
     * @returns the word's text trimmed of any whitespace characters
     *
     * ```typescript
     * const text: Text = new Text("?????????????????????????? ??????????");
     * const words = text.words.map((word) => word.text);
     * words;
     * // [
     * //    "??????????????",
     * //    "????????????",
     * //    "????????????"
     * //  ]
     * ```
     */
    get text(): string;
    /**
     * @returns a one dimensional array of Syllables
     *
     * ```typescript
     * const text: Text = new Text("?????????????????????????? ??????????");
     * text.words[0].syllables;
     * // [
     * //    Syllable { original: "??????" },
     * //    Syllable { original: "????????" }
     * //  ]
     * ```
     */
    get syllables(): Syllable[];
    /**
     * @returns a one dimensional array of Clusters
     *
     * ```typescript
     * const text: Text = new Text("?????????????????????????? ??????????");
     * text.words[0].clusters;
     * // [
     * //    Cluster { original: "????" },
     * //    Cluster { original: "??" },
     * //    Cluster { original: "????" },
     * //    Cluster { original: "????" }
     * //  ]
     * ```
     */
    get clusters(): Cluster[];
    /**
     * @returns a one dimensional array of Chars
     *
     * ```typescript
     * const text: Text = new Text("?????????????????????????? ??????????");text.words[0].chars;
     * // [
     * //    Char { original: "??" },
     * //    Char { original: "??" }, (tsere)
     * //    Char { original: "??" },
     * //    Char { original: "??" }, (holem)
     * //    Char { original: "??"},
     * //    Char { original: "??" }
     * //  ]
     * ```
     */
    get chars(): Char[];
    /**
     * @returns a boolean indicating if the text is a form of the Divine Name
     *
     * ```typescript
     * const text: Text = new Text("????????????");
     * text.words[0].isDivineName;
     * // true
     * ```
     */
    get isDivineName(): boolean;
    /**
     * @returns a boolean indicating if the word has a form of the Divine Name
     *
     * ```typescript
     * const text: Text = new Text("????????????????????");
     * text.words[0].hasDivineName;
     * // true
     * ```
     */
    get hasDivineName(): boolean;
}


