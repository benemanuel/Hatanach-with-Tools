import { Word } from "./word";
import { Syllable } from "./syllable";
import { Cluster } from "./cluster";
import { Char } from "./char";
/**
 * options for determining syllabification that may differ according to reading traditions
 */
export interface SylOpts {
    /**
     * determines whether to regard the shewa under the letters ???????????????????? when preceded by a waw-consecutive with a missing dagesh chazaq as a _shewa na'_. If a metheg is present, the shewa is always a _shewa na'_.
     *
     * @defaultValue true
     * @example
     * ```ts
     * const default = new Text("????????????????????");
     * default.syllables.map(syl => syl.text);
     * // ["????", "????", "????", "????????"]
     *
     * const optional = new Text("????????????????????", { sqnmlvy: false });
     * optional.syllables.map(syl => syl.text);
     * // ["????????", "????", "????????"]
     * ```
     */
    sqnmlvy?: boolean;
    /**
     * determines whether to regard the shewa under the letters ?????? when preceded by the article and with a missing dagesh chazaq as as a _shewa na'_. If a metheg is present, the shewa is always a _shewa na'_.
     *
     * @defaultValue true
     * @example
     * ```ts
     * const default = new Text("????????????????");
     * default.syllables.map(syl => syl.text);
     * // ["????", "????", "????????"]
     *
     * const optional = new Text("????????????????", { article: false });
     * optional.syllables.map(syl => syl.text);
     * // ["????????", "????????"]
     * ```
     *
     * @remarks
     *
     * results in example displayed in reverse order to mimic Hebrew writing; the rightmost value is the 0 item
     */
    article?: boolean;
    /**
     * determines whether to regard a shewa after a long vowel (excluding waw-shureq, see {@link wawShureq}) as a _shewa na'_. If a metheg is present, the shewa is always a _shewa na'_.
     *
     * @defaultValue true
     * @example
     * ```ts
     * const default = new Text("????????????");
     * default.syllables.map(syl => syl.text);
     * // ["????", "????", "????"]
     *
     * const optional = new Text("????????????", { longVowels: false });
     * optional.syllables.map(syl => syl.text);
     * // ["????????", "????"]
     * ```
     *
     * @remarks
     *
     * results in example displayed in reverse order to mimic Hebrew writing; the rightmost value is the 0 item
     */
    longVowels?: boolean;
    /**
     * determines whether to regard a shewa after a vav-shureq as vocal. If a metheg is present, the shewa is always a _shewa na'_.
     *
     * @defaultValue true
     * @example
     * ```ts
     * const default = new Text("????????????????????");
     * default.syllables.map(syl => syl.text);
     * // "????", "????", "????", "????????"]
     *
     * const optional = new Text("????????????????????", { wawShureq: false });
     * optional.syllables.map(syl => syl.text);
     * // ["????????", "????", "????????"]
     * ```
     *
     * @remarks
     *
     * results in example displayed in reverse order to mimic Hebrew writing; the rightmost value is the 0 item
     */
    wawShureq?: boolean;
    /**
     * converts regular qamets characters to qamets qatan characters where appropriate. The former is a "long-vowel" whereas the latter is a "short-vowel."
     *
     * @defaultValue true
     * @example
     * ```ts
     * const qQRegx = /\u{05C7}/u;
     * const default = new Text("????????????????");
     * qQRegx.test(default.text);
     * // true
     *
     * const optional = new Text("????????????????", { qametsQatan: false });
     * qQRegx.test(optional.text);
     * // false
     * ```
     */
    qametsQatan?: boolean;
    /**
     * preset syllabification options; for more, see [syllabification](../pages/Linguistic/syllabification.html#schemas)
     *
     */
    schema?: Schema;
}
declare type Schema = "tiberian" | "traditional";
/**
 * `Text` is the main exported class.
 *
 */
export declare class Text {
    #private;
    private options;
    /**
     * `Text` requires an input string,
     * and has optional arguments for syllabification,
     * which can be read about in the {@page Syllabification} page
     */
    constructor(text: string, options?: SylOpts);
    private validateInput;
    private validateOptions;
    private setOptions;
    private setSchemaOptions;
    private setDefaultOptions;
    private get normalized();
    private get sanitized();
    /**
     * @returns the original string passed
     *
     * ```typescript
     * const text: Text = new Text("????????????????");
     * text.original;
     * // "????????????????"
     * ```
     */
    get original(): string;
    /**
     * @returns a string that has been decomposed, sequenced, qamets qatan patterns converted to the appropriate unicode character (U+05C7), and holem-waw sequences corrected
     *
     * ```typescript
     * import { Text } from "havarotjs";
     * const text: Text = new Text("??????????????????");
     * text.text;
     * // ??????????????????
     * ```
     */
    get text(): string;
    /**
     * @returns a one dimensional array of Words
     *
     * ```typescript
     * const text: Text = new Text("????????????????");
     * text.words;
     * // [Word { original: "????????????????" }]
     * ```
     */
    get words(): Word[];
    /**
     * @returns a one dimensional array of Syllables
     *
     * ```typescript
     * const text: Text = new Text("????????????????");
     * text.syllables;
     * // [
     * //    Syllable { original: "????" },
     * //    Syllable { original: "????" },
     * //    Syllable { original: "????????" }
     * //  ]
     * ```
     */
    get syllables(): Syllable[];
    /**
     * @returns a one dimensional array of Clusters
     *
     * ```typescript
     * const text: Text = new Text("??????");
     * text.clusters;
     * // [
     * //    Cluster { original: "????" },
     * //    Cluster { original: "??" }
     * //  ]
     * ```
     */
    get clusters(): Cluster[];
    /**
     * @returns a one dimensional array of Chars
     *
     * ```typescript
     * const text: Text = new Text("??????");
     * text.chars;
     * //  [
     * //    Char { original: "??" },
     * //    Char { original: "??" },
     * //    Char { original: "??" }
     * //  ]
     * ```
     */
    get chars(): Char[];
}
export {};


