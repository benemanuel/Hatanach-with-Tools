import { Cluster } from "./cluster";
import { Char } from "./char";
/**
 * A `Syllable` is created from an array of [[`Clusters`]].
 */
export declare class Syllable {
    #private;
    /**
     *
     * @param clusters
     * @param param1
     *
     * See the {@page Syllabification} page for how a syllable is determined.
     * Currently, the Divine Name (e.g. ????????), non-Hebrew text, and Hebrew punctuation (e.g. _passeq_, _nun hafucha_) are treated as a _single syllable_ because these do not follow the rules of Hebrew syllabification.
     */
    constructor(clusters: Cluster[], { isClosed, isAccented, isFinal }?: {
        isClosed?: boolean | undefined;
        isAccented?: boolean | undefined;
        isFinal?: boolean | undefined;
    });
    /**
     * @returns a string that has been built up from the .text of its consituent Clusters
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????");
     * const sylText = text.syllables.map((syl) => syl.text);
     * sylText;
     * //  [
     * //    "????"
     * //    "??????????"
     * //    "????????"
     * //  ]
     * ```
     */
    get text(): string;
    /**
     * @returns a one dimensional array of Clusters
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????");
     * text.syllables[1].clusters;
     * // [
     * //    Cluster { original: "??????" },
     * //    Cluster { original: "????" }
     * //  ]
     * ```
     */
    get clusters(): Cluster[];
    /**
     * @returns a one dimensional array of Chars
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????");
     * text.syllables[2].chars;
     * // [
     * //    Char { original: "??" },
     * //    Char { original: "??" },
     * //    Char { original: "" }, i.e. \u{05A8} (does not print well)
     * //    Char { original: "??" }
     * //  ]
     * ```
     */
    get chars(): Char[];
    /**
     * @returns true if Syllable is closed
     *
     * a closed syllable in Hebrew is a CVC or CVCC type, a mater letter does not close a syllable
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????");
     * text.syllables[0].isClosed; // i.e. "????"
     * // true
     * text.syllables[2].isClosed; // i.e. "????????"
     * // false
     * ```
     */
    get isClosed(): boolean;
    /**
     * @param closed a boolean for whether the Syllable is closed
     *
     * a closed syllable in Hebrew is a CVC or CVCC type, a _mater_ letter does not close a syllable
     */
    set isClosed(closed: boolean);
    /**
     * @returns true if Syllable is accented
     *
     * an accented syllable receives stress
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????"); // note the taam over the ??
     * text.syllables[0].isAccented; // i.e. "????"
     * // false
     * text.syllables[2].isAccented; // i.e. "????????"
     * // true
     * ```
     */
    get isAccented(): boolean;
    /**
     * @param accented a boolean for whether the Syllable is accented
     *
     * an accented syllable receives stress
     */
    set isAccented(accented: boolean);
    /**
     * @returns true if Syllable is final
     *
     * ```typescript
     * const text: Text = new Text("??????????????????????");
     * text.syllables[0].isFinal; // i.e. "????"
     * // false
     * text.syllables[2].isFinal; // i.e. "????????"
     * // true
     * ```
     */
    get isFinal(): boolean;
    /**
     * @param final a boolean for whether the Syllable is the final Syallble
     */
    set isFinal(final: boolean);
}


